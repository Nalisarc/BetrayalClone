#+Title: Traitor
#+author: Daniel Alexander Smith
#+email: nalisarc@gmail.com
* TODO Readme 
Traitor, is a personal project to transform the board game Betrayal on the House on the Hill by Bruce Glasses
into a computer program. I started writing this for the #100daysofcode challenge. While the main program is written
in python. Due to the nature of the style of document that this is written in. You could potentially convert the code into 
any language with a bit of work.
You can build your own copy of the game by opening index.org in emacs, and running entering C-c C-v C-t.

* TODO Licence
#+BEGIN_SRC text :tangle LICENCE.MD 
  Copyright (c) 2017 Daniel Alexander Smith

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
#+END_SRC

* TODO Characters
** TODO Character Table
** Character Object
#+name: Character_Object
#+BEGIN_SRC python :noweb yes :tangle traitor/character.py 
  class Character(object):
      def __init__(self):
          self.pos
    
#+END_SRC
** Statistics
Each stat contains a tuple of 9 possible vaules. The 0 slot of each stat is always "dead".
The remaining stats represent the number of dice that are roled for that type of roll.
The speed stat is also used to tell how many spaces a character can move per turn.
There might be some confusion about what the starting and current values mean.
These reference the range tuple slot, not the actual value itself. 
#+name: Stat_Object
#+BEGIN_SRC python
  class Stat(object):

      def __init__(self, range_, current):
          self.range_ = ('dead') + range_
          self.current = current
          return None

    

#+END_SRC

** Changing Stats
Sometimes in the game your characters will take damage.
Characters have four stats, these are broken up into two different catagories:
1. Mental
   * Knowledge
   * Sanity
2. Physical
   * Might
   * Speed

If a character takes damage to a category they have the ability to chose which stat takes the damage, 
and in cases of multiple points they can divide the points up however they chose so long all the points of damage are taken.
However if damage is dealt directly to a stat the character must take damage to that stat  unless it is mitigated somehow.

When a stat is damaged the current slot for that stat is reduced by points of damage taken.
\( current = current - damage \)
If this would push the slot into the negatives, or to 0 the character is dead. 

Raising a value is pretty much the same as taking damage, but in reverse.
The highest value is 8 and additional points are negated. 
\( current = current + raise \)

#+name: Character_Change_Stat
#+BEGIN_SRC python
  def change_stat(self, stat, value):
      """To raise the stat use a positive integer, 
      to lower the stat use a negative integer"""
      self.stat['current'] += value
      #Performs 0 check
      if self.stat['current'] < 0:
          self.stat['current'] = 0
      #Performs 8 check    
      if self.stat['current'] > 8:
          self.stat['current'] = 8
      #Change sucessful
      return None
#+END_SRC

Should a character take lethal damage before the haunt has started, the damage is negated and the stat is set to 1
This will be handled by the engine not the character object.

** Getting the stat value
** Miscellaneous Information 
Characters have some bits of miscellaneous information in addition to their core statistics.
This includes the name of the character, their age, birthday, hobbies, and other bits.
While it may seem a bit odd this information is used to determine player order, and in haunts.

** Moving
** MoveError
The MoveError is a custom exception used when the characters are unable to move for some reason.

** Tests
#+BEGIN_SRC python :tangle tests/character_tests.py

  import unittest
#+END_SRC 
* TODO House
The house is a 3 dimensional space, with various points representing the rooms.
 These points are always intigers, that can range from negative to positive.
 Each point is represented by a 3 digit vector (x,y,z).
 In normal operations Z should only ever range from -1 to 1. However I will not restrict this implicetly.
 Movement across the map is in what is called Taxi-Cab geometry. You cannot move diagonally under normal operations.

 Players can move any of the following directions:
 Cardinal Directions:
  * North
  * South
  * East
  * West

 Special Directions:
  * Up
  * Down
  * In
  * Out

 East and West increase and decrease the x axis by 1
 North and South increase and decrease the y axis by 1.

 In and Out are special, and can be thought of teleporting the player or monster to whatever it is connected to.
 In and Out only appear in a few cases, such as secret doors.
 Up and Down could in theory increase and decrease the z axis. And in somecases it might. However the upperlanding and basement landing
 are located at (0,0,1) and (0,0,-1) respectively. And rooms like the collapsed room, and the coal shute could be located anywhere on 
 the map. However if the basement had not been explored yet, it could lead to situations where the players become trapped and never able to
 return upstairs. To prevent this, up and down will also be treated like in and out. 

 If at any point a floor becomes blocked off, the house is suppose to adjust itself, so that at least one door is free.
 If there are no more rooms to discover but there are still open doors, those doors become disabled.
** House Main
 #+BEGIN_SRC python :noweb yes  :tangle traitor/house.py :var room_table=room-table
   #Imports
   import itertools
   import random
   #Exceptions

   #Objects
   <<Room_Object>>
   <<Room_List_Object>>
   <<Map_Object>>
   #internal functions
   <<house_discover>>

 #+END_SRC

** Room Table
This table contains a list of all the rooms in Tratior along with their initial properties.
It is dynamically generated from [[file:rooms.org][the room list]].
The columns are gathered from the property block on each room.
The name of the room is gathered from the headline.
Additional notes can be added in beneigh the property drawer, however they will not be represented in the table.
If you want to add in new rooms:
 1. Go to [[file:rooms.org][rooms.org]]
 2. Add a new headline.
 3. Fill in the property drawer
 4. Save
 5. Run C-c C-c on the Begin block below

#+BEGIN: columnview :skip-empty-rows t :id "909d5b16-7f7f-44a4-94dd-725d716badb8909d5b16-7f7f-44a4-94dd-725d716badb8"
#+name: room-table
| ITEM                     | SHAPE                      | FLOORS   |
|--------------------------+----------------------------+----------|
| Wine Cellar              | (True,False,True,False)    | (-1,)    |
| Junk Room                | (True,True,True,True)      | (-1,0,1) |
| Organ Room               | (False, False, True, True) | (-1,0,1) |
| Storeroom                | (True,False,False,False)   | (-1,1)   |
| Creeky Hallway           | (True,True,True,True)      | (-1,0,1) |
| Dusty Hallway            | (True,True,True,True)      | (-1,0,1) |
| Furnace Room             | (True,False,True,True)     | (-1,)    |
| Stairs from the Basement | (False,False,True,False)   | (-1,)    |
| Operating Laboratory     | (False,True,True,False)    | (-1,1)   |
| Pentagram Chamber        | (False,True,False,False)   | (-1,)    |
| Attic                    | (False,False,True,False)   | (1,)     |
| Chapel                   | (True,False,False,False)   | (0,1)    |
| Research Laboratory      | (True,False,True,False)    | (-1,1)   |
| Mystic Elevator          | (True,False,False,False)   | (-1,0,1) |
| Vault                    | (True,False,False,False)   | (-1,1)   |
| Gardens                  | (True,False,True,False)    | (0,)     |
| Graveyard                | (False,False,True,False)   | (0,)     |
| Patio                    | (True,False,True,True)     | (0,)     |
| Servants' Quarters       | (True,True,True,True)      | (-1,1)   |
| Catacombs                | (True,False,True,False)    | (-1,)    |
| Ballroom                 | (True,True,True,True)      | (0,)     |
| Gymnasium                | (False,True,True,False)    | (-1,1)   |
| Tower                    | (False,True,False,True)    | (1,)     |
| Larder                   | (True,False,True,False)    | (-1,)    |
| Bloody Room              | (True,True,True,True)      | (0,1)    |
| Dining Room              | (True,True,False,False)    | (0,)     |
| Master Bedroom           | (True,False,False,True)    | (1,)     |
| Conservatory             | (True,False,False,False)   | (0,1)    |
| Collapsed Room           | (True,True,True,True)      | (0,1)    |
| Bedroom                  | (False,True,False,True)    | (1,)     |
| Coal Chute               | (True,False,False,False)   | (1,)     |
| Game Room                | (True,True,True,False)     | (-1,0,1) |
| Library                  | (False,False,True,True)    | (0,1)    |
| Charred Room             | (True,True,True,True)      | (0,1)    |
| Abandoned Room           | (True,True,True,True)      | (-1,0)   |
| Balcony                  | (True,False,True,False)    | (1,)     |
| Statuary Corridor        | (True,False,True,False)    | (-1,0,1) |
| Underground Lake         | (True,True,False,False)    | (-1,)    |
| Kitchen                  | (True,True,False,False)    | (-1,0)   |
| Chasm                    | (False,True,False,True)    | (-1,)    |
| Crypt                    | (True,False,False,False)   | (-1,)    |
| Gallery                  | (True,False,True,False)    | (1,)     |
#+END:

This table is fed into python like so:
#+BEGIN_EXAMPLE
  [["item","shape","floors"]...]
#+END_EXAMPLE

This information is given to the roomlist object, and roomized into actual room objects.
Please note that these are the inital states of each room object, so it does not contain other information such as:
 + Coordnates
 + Contents
 + Rotation

** Room List Object
#+Name: Room_List_Object
#+BEGIN_SRC python 
  class RoomList(object):
      def __init__(self, list_, randomize=False):
          "A class for keeping track of the deck of room tiles"
          self.LIST = []
          for room in list_:
              self.LIST.append(self.roomize(room))

          if randomize:
              random.shuffle(self.LIST)

      def roomize(self, room):
          """Takes either a room object and passes it to the list, or a list with the room specs and turns it into a room"""
          input_type = str(type(room))
          if input_type == "<class 'list'>":
              # Add in some sanitizers later
              try:
                  output = Room(
                      name=room[0],
                      shape=eval(room[1]),
                      allowed_floors = eval(room[2]))
                  return output
              except TypeError:
                  raise ValueError("The room string is malformed")

          elif input_type == "<class 'traitor.house.Room'>":
              return room
          else:
              raise TypeError("{0} was given, expecting a list or a room".format(input_type))




      def draw_room(self):
          return self.LIST.pop()

      def add_room(self,*rooms,randomize=False):
          # Expects a list of rooms as input, it does not roomize.
          # Can be set to randomize as well
          if randomize:
              random.shuffle(rooms)

          for room in rooms:
              self.LIST.append(room)

          return None
#+END_SRC

** Map Object
After much consideration, it is easier to mantain and run tests on objects than it is to use a single module.
Even though the game will at no point have more than one house.
Finally it will actually give me the abillity to save a copy of the map, for analysis.
#+Name: Map_Object
#+BEGIN_SRC python :noweb yes 
  class Map(object):
      def __init__(self):
          self.MAP = {}
          self.setup()

      def __repr__(self):
          return [(room.get_coordnate(), room.name) for room in self.MAP]

      def setup(self):
          <<map_setup>>

      <<map_spawn_room>>


#+END_SRC
 
*** Setup
 #+name: map_setup
 #+BEGIN_SRC python
   self.MAP[(0,0,0)]= Room(
       "Entrance Hall",
       (True,True,False,True)
   )

   self.MAP[(0,1,0)] = Room(
       "Foyer",
       #Blank means all doors enabled
   )


   self.MAP[(0,2,0)] =  Room(
       "Grand Staircase",
       (False,False,True,False)
   )

   self.MAP[(0,0,1)] = Room(
       "Upper Landing",

   )

   self.MAP[(0,0,-1)] = Room(
       "Basement Landing",

   )

   for room in self.MAP:
       self.MAP[room].set_coordnate(room)
       self.MAP[room].set_edges()
       self.MAP[room].set_connections()

   self.MAP[(0,2,0)].bi_connect("up", self.MAP[(0,0,1)])


 #+END_SRC
*** Spawn Room
#+name: map_spawn_room
#+BEGIN_SRC python
  def spawn_room(self,coordnate,room):
      if coordnate not in self.MAP.keys():
          self.MAP[coordnate] = room
          return None
      else:
          raise KeyError #Replace with custom execption later

      raise KeyError #Shouldnt ever happen
#+END_SRC

** Room Object
   The room object is the representation of a room tile, the room object should be able to be easily represented by a table.
A room contains a few bits of information:
 1. The Room's Name:
  This is a string of arbitrary length and characters.
 2. The Room's Shape:
  Rooms in traitor are square tiles with a number of doors in them. The shape is represented with a tuple indicating whether or not
  that particular door is enabled.
  #+BEGIN_EXAMPLE
    (True,True,True,True)
  #+END_EXAMPLE
  If no shape is given, the room assumes that all doors have been enabled. And therefore are valid directions.
 3. The Room's Floor:
  Not all rooms are allowed on all floors. If no value is given, the room assumes that it is allowed on any floor.
 4. What Happens There:
  In traitor, there are a number of items, events, and omens, that are found through out the house.
  Some rooms are harder to move through, and some rooms will either hurt you, or heal you.
 
 #+name: Room_Object
 #+BEGIN_SRC python
   class Room(object):


       cardinal_directions = ('north','east','south','west')
       special_directions = ('up','down','in','out')
       edge_table = (
           ('north','south'),
           ('south','north'),
           ('east','west'),
           ('west','east'),
           ('up','down'),
           ('down','up'),
           ('in','out'),
           ('out','in'))





       def __init__(self,
                    name,
                    shape=(True, True, True, True),
                    allowed_floors=(-1,0,1)):
           self.name = name
           self.shape = shape
           self.allowed_floors = allowed_floors

           self.edges = []
           for edge in shape:
               self.edges.append(
                   {"direction": None,
                    "connection": None,
                    "enabled": edge
                    })

       def set_edges(self, rotation=0):
           """
           Rotation is an integer between 0-3.
           Anything higher is redundant and any < 0 will cause trouble.
           """
           if rotation < 0:
               raise ValueError

           direction_wheel = itertools.cycle(self.cardinal_directions)

           for n in range(int(rotation)):
               direction_wheel.__next__()
               continue

           for edge in self.edges:
               edge['direction'] = direction_wheel.__next__()
               continue

        

           return None

       def set_coordnate(self,coordnate):
           self.x,self.y,self.z = coordnate
           return None

       def get_coordnate(self):
           return (self.x,self.y,self.z)

       <<Connect_Rooms>>
       <<Connection_Test_Methods>>
       <<Move_Room>>



 #+END_SRC
** TODO Barrier Rooms
Barrier rooms are a subtype of room, you can enter from one side but inorder to cross it you mut pass some sort of challenge.
For the most part these are simply a roll, however if you fail the challenge you stop moving for the turn.
The traitor and monsters are immune to these challenges unless noted.
#+name: barrier_room
#+BEGIN_SRC python

#+END_SRC

** TODO Ending Conditions
If you end your turn in these rooms something happeneds. This can be negative or positive.
However negative effects tend to happen anytime you end your turn in that room; whereas positive tend to only
happen once per player per game.
** TODO Special Rooms
These rooms all have something special about them by default that is difficult to catagories, or would lead to unnessisarly
overly complicated pieces. Instead these rooms all get clumped into the catagory of "special".
*** TODO Mystic Elevator
Once per turn, the player can make a roll to move the elevator.
This will change the coordnate of the elevator and anything inside of it, to the new coordnate.
The elevator cannot be used to block off a floor.
The traitor can move the elevator at will.
*** TODO Coal Chute
Upon entering the coal chute, the player is moved down to (0,0,-1). This is a one way trip
*** TODO Gallery
If the ballroom is on the board, the player can jump down to it for one die of physical damage.
This is one way
*** TODO Vault
Once per turn, players can try to unlock the vault. If they succeed they are rewarded two items, and the vault becomes empty.
*** TODO Collapsed Room
Upon leaving the Collapsed room, players must make a speed check.
If they fail they fall into a discoved room in the basement and take one die of physical damage.
** Connecting Rooms
#+name: Connect_Rooms
#+BEGIN_SRC python 
  def set_connections(self):
      for edge in self.edges:
          x,y,z = self.get_coordnate()
          if edge["direction"] == 'north':
              y += 1
          if edge["direction"] == 'south':
              y -= 1
          if edge["direction"] == 'east':
              x += 1
          if edge["direction"] == 'west':
              x -= 1
          edge["connection"] = (x,y,z)
      return None
            
  def connect(self, direction, room):

      if direction in self.special_directions:
          self.edges.append(
              {"direction": direction,
               "connection": room.get_coordnate()
              }
              )
          return None
      for edge in self.edges:
          if direction in edge['direction']:
              edge['direction'] = direction
              edge['connection'] = room.get_coordnate()
              return None
          else:
              pass



  def bi_connect(self, direction, room):

      opposite_direction = None
      for d in self.edge_table:
          if d[0] == direction:
              opposite_direction = d[1]
              break
          else:
              continue
      if opposite_direction == None:
          return "Error: Missing Opposite Edge!"

      self.connect(direction, room)
      room.connect(opposite_direction, self)



#+END_SRC
** Check Connection
#+name: Connection_Test_Methods
#+BEGIN_SRC python
  def is_connected_at(self, direction):
      for edge in self.edges:
          if edge["direction"] == direction:
              return True

      return False

  def is_connected_to(self,room):
      for edge in self.edges:
          if edge["connection"] == room:
              return True
      return False

  def is_connected_to_at(self,direction,room):
      for edge in self.edges:
          con_1 = edge["direction"] == direction
          con_2 = edge["connection"] == room
          if con_1 and con_2:
              return True

      return False
#+END_SRC
** Returning A Connection
 Room objects have a move method, this takes a direction from their edges table and returns the coordnates.
 The idea is so that each character, monster, ect has a "position" that is the room's coordnates.
 In the event that the room hasn't been discovered, it sends up an assertion error that signals to the engine to discover a room.

 #+name: Move_Room
 #+BEGIN_SRC python 
   def get_connection(self, direction):
       for edge in self.edges:
           if edge['direction'] == direction:
               return edge['connection']
           else:
               pass
       raise KeyError #replace with custom error later
 #+END_SRC

** Discovering Rooms
Should a player move into a room that hasn't been discovered yet, that player uncovers a new room.
This selection is done at random from the room list, certain rooms can only be placed on certain floors.
If the newly discoved room has an event in it, the player must stop moving and activate the event!

#+name: house_discover
#+BEGIN_SRC python

  def placeable_room_exists(coordnate,ROOM_LIST):
      return True in [coordnate[2] in room.allowed_floors for room in ROOM_LIST.LIST]

  def can_place_room(coordnate,room):
      return coordnate[2] in room.allowed_floors

  def search_for_room(coordnate, ROOM_LIST):
      # Check to make sure that this is possible
      if not placeable_room_exists(coordnate, ROOM_LIST):
          raise IndexError("No rooms can be placed on this floor")

      stack = []
      run = True

      while run:
          drawn_room = ROOM_LIST.draw_room()
          if can_place_room(coordnate,drawn_room):
              # Do nothing allow for the room to be placed 
              break
          else:
              stack.append(drawn_room)

      ROOM_LIST.add_room(*stack, randomize=True)
      return drawn_room

  def rotate_room(room,direction):
      # Gets a list of all vaild room rotations
      # Then calls for user input or the first member
      cardinal_directions = ('north','east','south','west')
      edge_table = {
          'north': 'south',
          'south': 'north',
          'east': 'west',
          'west': 'east'}

      # A circular list containing the cardinal directions
      # The wheel "spins" to provide a rotation number
      # Then the number is fed to the room during assignment
      allowed_rotations = []
      for r in range(4):
          direction_wheel = itertools.cycle(cardinal_directions)
          for n in range(int(r)):
              direction_wheel.__next__()
              continue

          zipped = zip(direction_wheel,room.shape)
          for z in zipped:
              condition1 = z[0] == edge_table[direction]
              condition2 = z[1] == True

              if condition1 and condition2:
                  allowed_rotations.append(r)
              else:
                  continue

      return allowed_rotations

  def discover_room(MAP,ROOM_LIST,coordnate,direction):
    
      new_room = search_for_room(coordnate, ROOM_LIST)
      allowed_rotations = rotate_room(new_room,direction)
      r = allowed_rotations[0]
      # Puts room on map
      MAP.spawn_room(coordnate,new_room)
      MAP.MAP[coordnate].set_coordnate(coordnate)
      MAP.MAP[coordnate].set_edges(r)
      MAP.MAP[coordnate].set_connections()
      return None #Everything Worked!
    
#+END_SRC

** Tests
*** Boiler Plate                                                   :noexport:
#+name: house_test_imports
#+BEGIN_SRC python
  import unittest
  import sys
  from traitor import house

#+END_SRC

#+name: test_boiler
#+BEGIN_SRC python
  if __name__ == '__main__':
      unittest.main()
      sys.exit()
#+END_SRC

*** Discover Tests
#+BEGIN_SRC python :tangle tests/discover_tests.py :noweb yes 
  <<house_test_imports>>


  class Discover_Tests(unittest.TestCase):

      def test_placeable_room_exists(self):
          ROOM_LIST = house.RoomList([]) #Empty
          self.assertFalse(house.placeable_room_exists((0,0,0),ROOM_LIST))
          ROOM_LIST.add_room(house.Room("Test",(False,False,False,False),(0,)))
          self.assertTrue(house.placeable_room_exists((0,0,0),ROOM_LIST))

      def test_can_place_room(self):
          #Test for False:
          self.assertFalse(
          house.can_place_room((0,0,0),house.Room("Test 1",(False,False,False,False),(-1,)))
          )
          #Test for True:
          self.assertTrue(
          house.can_place_room((0,0,0),house.Room("Test 2",(False,False,False,False),(0,)))
          )

      def test_search_fails_on_no_placeable_room(self):
          ROOM_LIST = house.RoomList([])
          with self.assertRaises(IndexError) as cm:
              house.search_for_room((0,0,0),ROOM_LIST)
          return None


      def test_rotate_room(self):
          # Test Rooms
          FOUR_TRUE_ROOM = house.Room("Test Room 4",(True,True,True,True),(-1,0,1))
          THREE_TRUE_ROOM = house.Room("Test Room 3",(False,True,True,True),(-1,0,1))
          TWO_TRUE_ROOM = house.Room("Test Room 2",(False,False,True,True),(-1,0,1))
          ONE_TRUE_ROOM = house.Room("Test Room 1",(False,False,False,True),(-1,0,1))
          ZERO_TRUE_ROOM = house.Room("Test Room 0",(False,False,False,False),(-1,0,1))
          # Expected Rotations
          FOUR_ROTATIONS = [0,1,2,3]
          THREE_ROTATIONS = [0,1,3]
          TWO_ROTATIONS = [0,3]
          ONE_ROTATIONS = [3]
          ZERO_ROTATIONS = []

          # Tests if output matches expected
          self.assertEqual(house.rotate_room(FOUR_TRUE_ROOM,"north"),FOUR_ROTATIONS)
          self.assertEqual(house.rotate_room(THREE_TRUE_ROOM, "north"),THREE_ROTATIONS)
          self.assertEqual(house.rotate_room(TWO_TRUE_ROOM, "north"), TWO_ROTATIONS)
          self.assertEqual(house.rotate_room(ONE_TRUE_ROOM, "north"), ONE_ROTATIONS)
          self.assertEqual(house.rotate_room(ZERO_TRUE_ROOM, "north"), ZERO_ROTATIONS)


      def test_discover_room(self):
          DISCOVERED_ROOM = house.Room("Discoved Room",(True,True,True,True),(-1,0,1))        
          MAP = house.Map()
          ROOM_LIST = house.RoomList([DISCOVERED_ROOM])
          house.discover_room(MAP,ROOM_LIST,(1,0,0),"east")

          self.assertEqual(MAP.MAP[(1,0,0)].name, "Discoved Room")

          self.assertTrue(MAP.MAP[(0,0,0)].is_connected_at('east'))
          self.assertTrue(MAP.MAP[(1,0,0)].is_connected_at('west'))
        

#+END_SRC

*** Room List Tests
#+BEGIN_SRC python :tangle tests/room_list_tests.py :noweb yes  :var roomlist=room-table
  <<house_test_imports>>

  class RoomListTests(unittest.TestCase):

      def test_fill_roomlist(self):
          ROOMLIST = house.RoomList(roomlist)
          self.assertNotEqual(
              ROOMLIST.LIST, []
              )

      def test_can_roomize(self):
          ROOMLIST = house.RoomList([["test", "(None,None,None,None)", "(None,None,None,None)"]])
          self.assertEqual(
              str(type(ROOMLIST.LIST[0])), "<class 'traitor.house.Room'>")

      def test_wont_roomize_garbage(self):
          ROOMLIST = house.RoomList([])
          with self.assertRaises(TypeError) as cm:
              ROOMLIST.roomize(1)





#+END_SRC
*** Room Tests
#+BEGIN_SRC python :tangle tests/room_unit_tests.py :noweb yes 
  <<house_test_imports>>

  class RoomUnitTests(unittest.TestCase):
      def test_rooms_have_no_direction_by_default(self):
          test_room = house.Room(
              "test_room"
          )
          for edge in test_room.edges:
              self.assertEqual(edge['direction'], None)

      def test_rooms_default_rotation(self):
          test_room = house.Room(
              "test_room")
          test_room.set_edges()
          edges = test_room.edges
          directions = test_room.cardinal_directions
          zipped = zip(edges, directions)
          for edge, direction in zipped:
              self.assertEqual(edge["direction"], direction)

            
      def test_rooms_rotation(self):
          test_room = house.Room(
          "test_room")
          test_room.set_edges(1)
          edges = test_room.edges
          self.assertEqual(
              edges[0]['direction'], 'east')
          self.assertEqual(
              edges[1]['direction'], 'south')
          self.assertEqual(
              edges[2]['direction'], 'west')
          self.assertEqual(
              edges[3]['direction'], 'north')

#+END_SRC
*** Map Tests
#+BEGIN_SRC python :tangle tests/map_tests.py :noweb yes 
  <<house_test_imports>>

  class MapUnitTests(unittest.TestCase):

      def setUp(self):
          self.house = house.Map()
          self.MAP = self.house.MAP

      def test_if_setup_room_exist(self):
          list_of_rooms = [[r, self.MAP[r]] for r in self.MAP]
          self.assertNotEqual(len(list_of_rooms), 0)

      def test_if_setup_connects_rooms(self):
          # Check if connections can be made

          self.assertTrue(
              self.MAP[(0, 0, 0)].is_connected_at('north'),
          )
          self.assertTrue(
              self.MAP[(0, 1, 0)].is_connected_at('north')
          )
          self.assertTrue(
              self.MAP[(0, 2, 0)].is_connected_at('up')
          )

          # Check reverse connections.
          self.assertTrue(
              self.MAP[(0, 1, 0)].is_connected_at('south')
          )
          self.assertTrue(
              self.MAP[(0, 2, 0)].is_connected_at('south')
          )
          self.assertTrue(
              self.MAP[(0, 0, 1)].is_connected_at('down')
          )

      def test_can_move_between_rooms(self):
          pos = self.MAP[(0, 0, 0)]

          pos = self.MAP[pos.get_connection('north')]

          self.assertEqual(pos, self.MAP[(0, 1, 0)],
                           "Position did not move!")
          pos = self.MAP[pos.get_connection('south')]

          self.assertEqual(pos, self.MAP[(0, 0, 0)],
                           "Position failed in reverse")

      def test_cannot_move_invalid_direction(self):

          pos = self.MAP[(0, 0, 0)]
          try:
              pos = self.MAP[pos.get_connection('up')]
          except KeyError:
              self.assertEqual(pos, self.MAP[(0, 0, 0)])

      def test_can_spawn_new_rooms(self):
          discovered_room = house.Room(
              "Test Room",

          )
          self.house.spawn_room(
              (1, 0, 0),
              discovered_room
          )
          self.assertEqual(self.MAP[(1,0,0)], discovered_room)
#+END_SRC

* TODO Items
* TODO Events
* TODO Omens
* TODO Haunts
#+BEGIN: columnview :skip-empty-rows t :id file:haunts.org

#+END:
* TODO Engine
We start putting things together here in the engine
#+BEGIN_SRC python :tangle traitor/main.py :noweb yes  :shebang #!/usr/bin/env python3
  import sys
  import house
  class player(object):

      def __init__(self):

          self.pos = house.MAP[(0,0,0)]
          return None

      def repl(self):
          print("Traitor pre-alpha demo")
          print("Made by Daniel A Smith")
          prompt = '==> '

          while True:
              command = input(prompt)
              command_parsed = command.split()
              if len(command_parsed) == 0:
                  pass
              elif command_parsed[0] == 'go':
                  try:
                      self.go(command_parsed[1])
                  except IndexError:
                      d = input("Which direction do you want to go?: ")
                      self.go(d)
                  except:
                      print("Something went wrong")
              elif command_parsed[0] == 'look':
                  self.look()
              elif command_parsed[0] == 'quit':
                  self.quit()
              else:
                  print("Invaild command, sorry")


      def go(self,direction):
          try:
              self.pos = house.MAP[self.pos.move(direction)]
              print(self.pos.name, self.pos.get_coordnate())
              return None
          except AssertionError:
              print("You can't go that way")
          except KeyError:
              house.spawn_room(
                  (self.pos.move(direction)),
                   house.ROOM_LIST.pop())
              house.MAP[self.pos.move(direction)].set_coordnate(
              self.pos.move(direction))
              house.MAP[self.pos.move(direction)].set_connections()
              self.pos = house.MAP[self.pos.move(direction)]
              print(self.pos.name)
      def quit(self):
          sys.exit()

      def look(self):
          print("You are in the {}".format(self.pos.name))
          print("You can go: ")
          for edge in self.pos.edges:
              if edge["enabled"] == True:
                  print(edge['direction'])
          return None


  if __name__ == '__main__':
      me = player()
      me.repl()
#+END_SRC

* Dice
The dice in tratior are a type of six sided dice that have the values: 0,1,2 printed twice.
To represent this in the game, dice are a d3 with those values.
The player will role a number of dice equal to the stat on that roll.
For example: if you were to role a knowledge roll and your stat was 3, you would get back the sum of
3 random numbers between 0-2. Therefore the highest you can get is 6.
In the game, there are only 8 dice. I won't be capping that number explictly because you won't get above it in game.
The maximum possible output is 2N and the minimum possible output is always 0
#+name: dice_function
#+BEGIN_SRC python
  import random
  def roll(N):
      return sum([random.randint(0,2) for r in range(N)])



