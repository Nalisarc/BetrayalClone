#+Title: Traitor
#+author: Daniel Alexander Smith
#+email: nalisarc@gmail.com
* TODO Readme
* TODO License

* TODO Characters
** Character Object
#+name: Character_Object
#+BEGIN_SRC python :noweb yes 
  class Character(object):

      def __init__(self):

          self.name = name
          self.birthday = birthday

          #Stat lists

          self.might = might
          self.speed = speed
          self.knowledge = knowledge
          self.sanity = sanity

          #Inventory
          self.inventory = []

      <<Character_Change_Stat>>
    
#+END_SRC
** Statistics
Stats are represented as dictionaries containing the following bits of info:
 * Value tuple
 * Starting Slot
 * Current Slot

Each stat contains a list of 9 possible vaules. The 0 slot of each stat is always "dead".
The remaining stats represent the number of dice that are roled for that type of roll.
The speed stat is also used to tell how many spaces a character can move per turn.
#+name: Statistic_Example
#+BEGIN_SRC python :exports code 
  might = {
      'range': ('dead',1,2,3,4,5,5,6,6)
      'starting': 3
      'current': 3
      }
#+END_SRC
There might be some confusion about what the starting and current values mean.
These reference the range tuple slot, not the actual value itself. 

** Changing Stats
Sometimes in the game your characters will take damage.
Characters have four stats, these are broken up into two different catagories:
1. Mental
   * Knowledge
   * Sanity
2. Physical
   * Might
   * Speed

If a character takes damage to a category they have the ability to chose which stat takes the damage, 
and in cases of multiple points they can divide the points up however they chose so long all the points of damage are taken.
However if damage is dealt directly to a stat the character must take damage to that stat  unless it is mitigated somehow.

When a stat is damaged the current slot for that stat is reduced by points of damage taken.
\( current = current - damage \)
If this would push the slot into the negatives, or to 0 the character is dead. 

Raising a value is pretty much the same as taking damage, but in reverse.
The highest value is 8 and additional points are negated. 
\( current = current + raise \)

#+name: Character_Change_Stat
#+BEGIN_SRC python
  def change_stat(self, stat, value):
      """To raise the stat use a positive integer, 
      to lower the stat use a negative integer"""
      self.stat['current'] += value
      #Performs 0 check
      if self.stat['current'] < 0:
          self.stat['current'] = 0
      #Performs 8 check    
      if self.stat['current'] > 8:
          self.stat['current'] = 8
      #Change sucessful
      return None
#+END_SRC

Should a character take lethal damage before the haunt has started, the damage is negated and the stat is set to 1
This will be handled by the engine not the character object.



** Miscellaneous Information 
Characters have some bits of miscellaneous information in addition to their core statistics.
This includes the name of the character, their age, birthday, hobbies, and other bits.
While it may seem a bit odd this information is used to determine player order, and in haunts.

* TODO Engine
* TODO Rooms
The house in Traitor is never the same.
The house is generated by a series of rooms that are randomly arranged.
There are some constants about the house however, the house is always three floors.
You will always start on the first floor.
At the end of the entrance hall is a stair case to the second floor.
The staircase to the basement is hidden so you'll have to find it, once you do it is always connected to the end of the hall.

** TODO Room Object
#+name: Room_Object
#+BEGIN_SRC python
  class Room(object):

      def __init__(self):
          self.name = name
          self.edges = edges
          self.card = card
          self.special = special


      

#+END_SRC
Room objects have a name, a dictornary telling which direction connects to which other room.
Some rooms have something happen in them either you find a item, an omen, or an event. 
This is stored in the card value.
** TODO Map
* TODO Cards
** TODO Items
** TODO Events
** TODO Omens
* TODO Haunts
* TODO Interface
* TODO Multiplayer
